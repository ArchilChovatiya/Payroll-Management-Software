//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace PayRoll_Application {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PayrollSystemDBDataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PayrollSystemDBDataSet1 : global::System.Data.DataSet {
        
        private PayrollDataTable tablePayroll;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public PayrollSystemDBDataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected PayrollSystemDBDataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Payroll"] != null)) {
                    base.Tables.Add(new PayrollDataTable(ds.Tables["Payroll"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PayrollDataTable Payroll {
            get {
                return this.tablePayroll;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            PayrollSystemDBDataSet1 cln = ((PayrollSystemDBDataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Payroll"] != null)) {
                    base.Tables.Add(new PayrollDataTable(ds.Tables["Payroll"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tablePayroll = ((PayrollDataTable)(base.Tables["Payroll"]));
            if ((initTable == true)) {
                if ((this.tablePayroll != null)) {
                    this.tablePayroll.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitClass() {
            this.DataSetName = "PayrollSystemDBDataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PayrollSystemDBDataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePayroll = new PayrollDataTable();
            base.Tables.Add(this.tablePayroll);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializePayroll() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PayrollSystemDBDataSet1 ds = new PayrollSystemDBDataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void PayrollRowChangeEventHandler(object sender, PayrollRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PayrollDataTable : global::System.Data.TypedTableBase<PayrollRow> {
            
            private global::System.Data.DataColumn columnPaymentID;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnFullName;
            
            private global::System.Data.DataColumn columnESINumber;
            
            private global::System.Data.DataColumn columnPaymentDate;
            
            private global::System.Data.DataColumn columnPaymentMonth;
            
            private global::System.Data.DataColumn columnHourlyRate;
            
            private global::System.Data.DataColumn columnOvertimeRate;
            
            private global::System.Data.DataColumn columnContractualHours;
            
            private global::System.Data.DataColumn columnOvertimeHours;
            
            private global::System.Data.DataColumn columnTotalHours;
            
            private global::System.Data.DataColumn columnContractualEarning;
            
            private global::System.Data.DataColumn columnOvertimeEarning;
            
            private global::System.Data.DataColumn columnTotalEarning;
            
            private global::System.Data.DataColumn columnGSTNO;
            
            private global::System.Data.DataColumn columnTDS;
            
            private global::System.Data.DataColumn columnPT;
            
            private global::System.Data.DataColumn columnESIC;
            
            private global::System.Data.DataColumn columnLWF;
            
            private global::System.Data.DataColumn columnTaxRate;
            
            private global::System.Data.DataColumn columnPF;
            
            private global::System.Data.DataColumn columnADV;
            
            private global::System.Data.DataColumn columnTotalDeduction;
            
            private global::System.Data.DataColumn columnNetPay;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public PayrollDataTable() {
                this.TableName = "Payroll";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal PayrollDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected PayrollDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn PaymentIDColumn {
                get {
                    return this.columnPaymentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ESINumberColumn {
                get {
                    return this.columnESINumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn PaymentDateColumn {
                get {
                    return this.columnPaymentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn PaymentMonthColumn {
                get {
                    return this.columnPaymentMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn HourlyRateColumn {
                get {
                    return this.columnHourlyRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OvertimeRateColumn {
                get {
                    return this.columnOvertimeRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ContractualHoursColumn {
                get {
                    return this.columnContractualHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OvertimeHoursColumn {
                get {
                    return this.columnOvertimeHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TotalHoursColumn {
                get {
                    return this.columnTotalHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ContractualEarningColumn {
                get {
                    return this.columnContractualEarning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OvertimeEarningColumn {
                get {
                    return this.columnOvertimeEarning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TotalEarningColumn {
                get {
                    return this.columnTotalEarning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn GSTNOColumn {
                get {
                    return this.columnGSTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TDSColumn {
                get {
                    return this.columnTDS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn PTColumn {
                get {
                    return this.columnPT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ESICColumn {
                get {
                    return this.columnESIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn LWFColumn {
                get {
                    return this.columnLWF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TaxRateColumn {
                get {
                    return this.columnTaxRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn PFColumn {
                get {
                    return this.columnPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ADVColumn {
                get {
                    return this.columnADV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TotalDeductionColumn {
                get {
                    return this.columnTotalDeduction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn NetPayColumn {
                get {
                    return this.columnNetPay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public PayrollRow this[int index] {
                get {
                    return ((PayrollRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event PayrollRowChangeEventHandler PayrollRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event PayrollRowChangeEventHandler PayrollRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event PayrollRowChangeEventHandler PayrollRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event PayrollRowChangeEventHandler PayrollRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddPayrollRow(PayrollRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public PayrollRow AddPayrollRow(
                        string PaymentID, 
                        int EmployeeID, 
                        string FullName, 
                        string ESINumber, 
                        System.DateTime PaymentDate, 
                        string PaymentMonth, 
                        string HourlyRate, 
                        string OvertimeRate, 
                        decimal ContractualHours, 
                        decimal OvertimeHours, 
                        decimal TotalHours, 
                        string ContractualEarning, 
                        string OvertimeEarning, 
                        string TotalEarning, 
                        string GSTNO, 
                        string TDS, 
                        string PT, 
                        string ESIC, 
                        string LWF, 
                        string TaxRate, 
                        string PF, 
                        string ADV, 
                        string TotalDeduction, 
                        string NetPay) {
                PayrollRow rowPayrollRow = ((PayrollRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PaymentID,
                        EmployeeID,
                        FullName,
                        ESINumber,
                        PaymentDate,
                        PaymentMonth,
                        HourlyRate,
                        OvertimeRate,
                        ContractualHours,
                        OvertimeHours,
                        TotalHours,
                        ContractualEarning,
                        OvertimeEarning,
                        TotalEarning,
                        GSTNO,
                        TDS,
                        PT,
                        ESIC,
                        LWF,
                        TaxRate,
                        PF,
                        ADV,
                        TotalDeduction,
                        NetPay};
                rowPayrollRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPayrollRow);
                return rowPayrollRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public PayrollRow FindByPaymentID(string PaymentID) {
                return ((PayrollRow)(this.Rows.Find(new object[] {
                            PaymentID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                PayrollDataTable cln = ((PayrollDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PayrollDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars() {
                this.columnPaymentID = base.Columns["PaymentID"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnFullName = base.Columns["FullName"];
                this.columnESINumber = base.Columns["ESINumber"];
                this.columnPaymentDate = base.Columns["PaymentDate"];
                this.columnPaymentMonth = base.Columns["PaymentMonth"];
                this.columnHourlyRate = base.Columns["HourlyRate"];
                this.columnOvertimeRate = base.Columns["OvertimeRate"];
                this.columnContractualHours = base.Columns["ContractualHours"];
                this.columnOvertimeHours = base.Columns["OvertimeHours"];
                this.columnTotalHours = base.Columns["TotalHours"];
                this.columnContractualEarning = base.Columns["ContractualEarning"];
                this.columnOvertimeEarning = base.Columns["OvertimeEarning"];
                this.columnTotalEarning = base.Columns["TotalEarning"];
                this.columnGSTNO = base.Columns["GSTNO"];
                this.columnTDS = base.Columns["TDS"];
                this.columnPT = base.Columns["PT"];
                this.columnESIC = base.Columns["ESIC"];
                this.columnLWF = base.Columns["LWF"];
                this.columnTaxRate = base.Columns["TaxRate"];
                this.columnPF = base.Columns["PF"];
                this.columnADV = base.Columns["ADV"];
                this.columnTotalDeduction = base.Columns["TotalDeduction"];
                this.columnNetPay = base.Columns["NetPay"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass() {
                this.columnPaymentID = new global::System.Data.DataColumn("PaymentID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentID);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnFullName = new global::System.Data.DataColumn("FullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnESINumber = new global::System.Data.DataColumn("ESINumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnESINumber);
                this.columnPaymentDate = new global::System.Data.DataColumn("PaymentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDate);
                this.columnPaymentMonth = new global::System.Data.DataColumn("PaymentMonth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentMonth);
                this.columnHourlyRate = new global::System.Data.DataColumn("HourlyRate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHourlyRate);
                this.columnOvertimeRate = new global::System.Data.DataColumn("OvertimeRate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOvertimeRate);
                this.columnContractualHours = new global::System.Data.DataColumn("ContractualHours", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractualHours);
                this.columnOvertimeHours = new global::System.Data.DataColumn("OvertimeHours", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOvertimeHours);
                this.columnTotalHours = new global::System.Data.DataColumn("TotalHours", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHours);
                this.columnContractualEarning = new global::System.Data.DataColumn("ContractualEarning", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractualEarning);
                this.columnOvertimeEarning = new global::System.Data.DataColumn("OvertimeEarning", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOvertimeEarning);
                this.columnTotalEarning = new global::System.Data.DataColumn("TotalEarning", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalEarning);
                this.columnGSTNO = new global::System.Data.DataColumn("GSTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGSTNO);
                this.columnTDS = new global::System.Data.DataColumn("TDS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTDS);
                this.columnPT = new global::System.Data.DataColumn("PT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPT);
                this.columnESIC = new global::System.Data.DataColumn("ESIC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnESIC);
                this.columnLWF = new global::System.Data.DataColumn("LWF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLWF);
                this.columnTaxRate = new global::System.Data.DataColumn("TaxRate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxRate);
                this.columnPF = new global::System.Data.DataColumn("PF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPF);
                this.columnADV = new global::System.Data.DataColumn("ADV", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADV);
                this.columnTotalDeduction = new global::System.Data.DataColumn("TotalDeduction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDeduction);
                this.columnNetPay = new global::System.Data.DataColumn("NetPay", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetPay);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPaymentID}, true));
                this.columnPaymentID.AllowDBNull = false;
                this.columnPaymentID.Unique = true;
                this.columnPaymentID.MaxLength = 50;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnFullName.AllowDBNull = false;
                this.columnFullName.MaxLength = 50;
                this.columnESINumber.AllowDBNull = false;
                this.columnESINumber.MaxLength = 50;
                this.columnPaymentDate.AllowDBNull = false;
                this.columnPaymentMonth.AllowDBNull = false;
                this.columnPaymentMonth.MaxLength = 50;
                this.columnHourlyRate.AllowDBNull = false;
                this.columnHourlyRate.MaxLength = 50;
                this.columnOvertimeRate.AllowDBNull = false;
                this.columnOvertimeRate.MaxLength = 50;
                this.columnContractualHours.AllowDBNull = false;
                this.columnOvertimeHours.AllowDBNull = false;
                this.columnTotalHours.AllowDBNull = false;
                this.columnContractualEarning.AllowDBNull = false;
                this.columnContractualEarning.MaxLength = 50;
                this.columnOvertimeEarning.AllowDBNull = false;
                this.columnOvertimeEarning.MaxLength = 50;
                this.columnTotalEarning.AllowDBNull = false;
                this.columnTotalEarning.MaxLength = 50;
                this.columnGSTNO.AllowDBNull = false;
                this.columnGSTNO.MaxLength = 50;
                this.columnTDS.AllowDBNull = false;
                this.columnTDS.MaxLength = 50;
                this.columnPT.AllowDBNull = false;
                this.columnPT.MaxLength = 50;
                this.columnESIC.AllowDBNull = false;
                this.columnESIC.MaxLength = 50;
                this.columnLWF.AllowDBNull = false;
                this.columnLWF.MaxLength = 50;
                this.columnTaxRate.AllowDBNull = false;
                this.columnTaxRate.MaxLength = 50;
                this.columnPF.AllowDBNull = false;
                this.columnPF.MaxLength = 50;
                this.columnADV.AllowDBNull = false;
                this.columnADV.MaxLength = 50;
                this.columnTotalDeduction.AllowDBNull = false;
                this.columnTotalDeduction.MaxLength = 50;
                this.columnNetPay.AllowDBNull = false;
                this.columnNetPay.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public PayrollRow NewPayrollRow() {
                return ((PayrollRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PayrollRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(PayrollRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PayrollRowChanged != null)) {
                    this.PayrollRowChanged(this, new PayrollRowChangeEvent(((PayrollRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PayrollRowChanging != null)) {
                    this.PayrollRowChanging(this, new PayrollRowChangeEvent(((PayrollRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PayrollRowDeleted != null)) {
                    this.PayrollRowDeleted(this, new PayrollRowChangeEvent(((PayrollRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PayrollRowDeleting != null)) {
                    this.PayrollRowDeleting(this, new PayrollRowChangeEvent(((PayrollRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemovePayrollRow(PayrollRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PayrollSystemDBDataSet1 ds = new PayrollSystemDBDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PayrollDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PayrollRow : global::System.Data.DataRow {
            
            private PayrollDataTable tablePayroll;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal PayrollRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePayroll = ((PayrollDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string PaymentID {
                get {
                    return ((string)(this[this.tablePayroll.PaymentIDColumn]));
                }
                set {
                    this[this.tablePayroll.PaymentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tablePayroll.EmployeeIDColumn]));
                }
                set {
                    this[this.tablePayroll.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string FullName {
                get {
                    return ((string)(this[this.tablePayroll.FullNameColumn]));
                }
                set {
                    this[this.tablePayroll.FullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ESINumber {
                get {
                    return ((string)(this[this.tablePayroll.ESINumberColumn]));
                }
                set {
                    this[this.tablePayroll.ESINumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public System.DateTime PaymentDate {
                get {
                    return ((global::System.DateTime)(this[this.tablePayroll.PaymentDateColumn]));
                }
                set {
                    this[this.tablePayroll.PaymentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string PaymentMonth {
                get {
                    return ((string)(this[this.tablePayroll.PaymentMonthColumn]));
                }
                set {
                    this[this.tablePayroll.PaymentMonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string HourlyRate {
                get {
                    return ((string)(this[this.tablePayroll.HourlyRateColumn]));
                }
                set {
                    this[this.tablePayroll.HourlyRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string OvertimeRate {
                get {
                    return ((string)(this[this.tablePayroll.OvertimeRateColumn]));
                }
                set {
                    this[this.tablePayroll.OvertimeRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ContractualHours {
                get {
                    return ((decimal)(this[this.tablePayroll.ContractualHoursColumn]));
                }
                set {
                    this[this.tablePayroll.ContractualHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal OvertimeHours {
                get {
                    return ((decimal)(this[this.tablePayroll.OvertimeHoursColumn]));
                }
                set {
                    this[this.tablePayroll.OvertimeHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal TotalHours {
                get {
                    return ((decimal)(this[this.tablePayroll.TotalHoursColumn]));
                }
                set {
                    this[this.tablePayroll.TotalHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ContractualEarning {
                get {
                    return ((string)(this[this.tablePayroll.ContractualEarningColumn]));
                }
                set {
                    this[this.tablePayroll.ContractualEarningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string OvertimeEarning {
                get {
                    return ((string)(this[this.tablePayroll.OvertimeEarningColumn]));
                }
                set {
                    this[this.tablePayroll.OvertimeEarningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TotalEarning {
                get {
                    return ((string)(this[this.tablePayroll.TotalEarningColumn]));
                }
                set {
                    this[this.tablePayroll.TotalEarningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string GSTNO {
                get {
                    return ((string)(this[this.tablePayroll.GSTNOColumn]));
                }
                set {
                    this[this.tablePayroll.GSTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TDS {
                get {
                    return ((string)(this[this.tablePayroll.TDSColumn]));
                }
                set {
                    this[this.tablePayroll.TDSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string PT {
                get {
                    return ((string)(this[this.tablePayroll.PTColumn]));
                }
                set {
                    this[this.tablePayroll.PTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ESIC {
                get {
                    return ((string)(this[this.tablePayroll.ESICColumn]));
                }
                set {
                    this[this.tablePayroll.ESICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string LWF {
                get {
                    return ((string)(this[this.tablePayroll.LWFColumn]));
                }
                set {
                    this[this.tablePayroll.LWFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TaxRate {
                get {
                    return ((string)(this[this.tablePayroll.TaxRateColumn]));
                }
                set {
                    this[this.tablePayroll.TaxRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string PF {
                get {
                    return ((string)(this[this.tablePayroll.PFColumn]));
                }
                set {
                    this[this.tablePayroll.PFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ADV {
                get {
                    return ((string)(this[this.tablePayroll.ADVColumn]));
                }
                set {
                    this[this.tablePayroll.ADVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TotalDeduction {
                get {
                    return ((string)(this[this.tablePayroll.TotalDeductionColumn]));
                }
                set {
                    this[this.tablePayroll.TotalDeductionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string NetPay {
                get {
                    return ((string)(this[this.tablePayroll.NetPayColumn]));
                }
                set {
                    this[this.tablePayroll.NetPayColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class PayrollRowChangeEvent : global::System.EventArgs {
            
            private PayrollRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public PayrollRowChangeEvent(PayrollRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public PayrollRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace PayRoll_Application.PayrollSystemDBDataSet1TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PayrollTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public PayrollTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Payroll";
            tableMapping.ColumnMappings.Add("PaymentID", "PaymentID");
            tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID");
            tableMapping.ColumnMappings.Add("FullName", "FullName");
            tableMapping.ColumnMappings.Add("ESINumber", "ESINumber");
            tableMapping.ColumnMappings.Add("PaymentDate", "PaymentDate");
            tableMapping.ColumnMappings.Add("PaymentMonth", "PaymentMonth");
            tableMapping.ColumnMappings.Add("HourlyRate", "HourlyRate");
            tableMapping.ColumnMappings.Add("OvertimeRate", "OvertimeRate");
            tableMapping.ColumnMappings.Add("ContractualHours", "ContractualHours");
            tableMapping.ColumnMappings.Add("OvertimeHours", "OvertimeHours");
            tableMapping.ColumnMappings.Add("TotalHours", "TotalHours");
            tableMapping.ColumnMappings.Add("ContractualEarning", "ContractualEarning");
            tableMapping.ColumnMappings.Add("OvertimeEarning", "OvertimeEarning");
            tableMapping.ColumnMappings.Add("TotalEarning", "TotalEarning");
            tableMapping.ColumnMappings.Add("GSTNO", "GSTNO");
            tableMapping.ColumnMappings.Add("TDS", "TDS");
            tableMapping.ColumnMappings.Add("PT", "PT");
            tableMapping.ColumnMappings.Add("ESIC", "ESIC");
            tableMapping.ColumnMappings.Add("LWF", "LWF");
            tableMapping.ColumnMappings.Add("TaxRate", "TaxRate");
            tableMapping.ColumnMappings.Add("PF", "PF");
            tableMapping.ColumnMappings.Add("ADV", "ADV");
            tableMapping.ColumnMappings.Add("TotalDeduction", "TotalDeduction");
            tableMapping.ColumnMappings.Add("NetPay", "NetPay");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Payroll] WHERE (([PaymentID] = @Original_PaymentID) AND ([EmployeeID] = @Original_EmployeeID) AND ([FullName] = @Original_FullName) AND ([ESINumber] = @Original_ESINumber) AND ([PaymentDate] = @Original_PaymentDate) AND ([PaymentMonth] = @Original_PaymentMonth) AND ([HourlyRate] = @Original_HourlyRate) AND ([OvertimeRate] = @Original_OvertimeRate) AND ([ContractualHours] = @Original_ContractualHours) AND ([OvertimeHours] = @Original_OvertimeHours) AND ([TotalHours] = @Original_TotalHours) AND ([ContractualEarning] = @Original_ContractualEarning) AND ([OvertimeEarning] = @Original_OvertimeEarning) AND ([TotalEarning] = @Original_TotalEarning) AND ([GSTNO] = @Original_GSTNO) AND ([TDS] = @Original_TDS) AND ([PT] = @Original_PT) AND ([ESIC] = @Original_ESIC) AND ([LWF] = @Original_LWF) AND ([TaxRate] = @Original_TaxRate) AND ([PF] = @Original_PF) AND ([ADV] = @Original_ADV) AND ([TotalDeduction] = @Original_TotalDeduction) AND ([NetPay] = @Original_NetPay))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PaymentID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FullName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FullName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ESINumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ESINumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PaymentDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PaymentMonth", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentMonth", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HourlyRate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HourlyRate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OvertimeRate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OvertimeRate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContractualHours", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ContractualHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OvertimeHours", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "OvertimeHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalHours", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "TotalHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContractualEarning", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractualEarning", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OvertimeEarning", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OvertimeEarning", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalEarning", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalEarning", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GSTNO", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GSTNO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TDS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TDS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PT", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ESIC", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ESIC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LWF", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LWF", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TaxRate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TaxRate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PF", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PF", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ADV", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADV", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalDeduction", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalDeduction", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NetPay", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NetPay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Payroll] ([PaymentID], [EmployeeID], [FullName], [ESINumber], [PaymentDate], [PaymentMonth], [HourlyRate], [OvertimeRate], [ContractualHours], [OvertimeHours], [TotalHours], [ContractualEarning], [OvertimeEarning], [TotalEarning], [GSTNO], [TDS], [PT], [ESIC], [LWF], [TaxRate], [PF], [ADV], [TotalDeduction], [NetPay]) VALUES (@PaymentID, @EmployeeID, @FullName, @ESINumber, @PaymentDate, @PaymentMonth, @HourlyRate, @OvertimeRate, @ContractualHours, @OvertimeHours, @TotalHours, @ContractualEarning, @OvertimeEarning, @TotalEarning, @GSTNO, @TDS, @PT, @ESIC, @LWF, @TaxRate, @PF, @ADV, @TotalDeduction, @NetPay);
SELECT PaymentID, EmployeeID, FullName, ESINumber, PaymentDate, PaymentMonth, HourlyRate, OvertimeRate, ContractualHours, OvertimeHours, TotalHours, ContractualEarning, OvertimeEarning, TotalEarning, GSTNO, TDS, PT, ESIC, LWF, TaxRate, PF, ADV, TotalDeduction, NetPay FROM Payroll WHERE (PaymentID = @PaymentID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaymentID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FullName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FullName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ESINumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ESINumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaymentDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaymentMonth", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentMonth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HourlyRate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HourlyRate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OvertimeRate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OvertimeRate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractualHours", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ContractualHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OvertimeHours", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "OvertimeHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalHours", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "TotalHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractualEarning", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractualEarning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OvertimeEarning", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OvertimeEarning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalEarning", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalEarning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GSTNO", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GSTNO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TDS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TDS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PT", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ESIC", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ESIC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LWF", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LWF", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TaxRate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TaxRate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PF", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PF", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADV", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADV", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalDeduction", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalDeduction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NetPay", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NetPay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Payroll] SET [PaymentID] = @PaymentID, [EmployeeID] = @EmployeeID, " +
                "[FullName] = @FullName, [ESINumber] = @ESINumber, [PaymentDate] = @PaymentDate, " +
                "[PaymentMonth] = @PaymentMonth, [HourlyRate] = @HourlyRate, [OvertimeRate] = @Ov" +
                "ertimeRate, [ContractualHours] = @ContractualHours, [OvertimeHours] = @OvertimeH" +
                "ours, [TotalHours] = @TotalHours, [ContractualEarning] = @ContractualEarning, [O" +
                "vertimeEarning] = @OvertimeEarning, [TotalEarning] = @TotalEarning, [GSTNO] = @G" +
                "STNO, [TDS] = @TDS, [PT] = @PT, [ESIC] = @ESIC, [LWF] = @LWF, [TaxRate] = @TaxRa" +
                "te, [PF] = @PF, [ADV] = @ADV, [TotalDeduction] = @TotalDeduction, [NetPay] = @Ne" +
                "tPay WHERE (([PaymentID] = @Original_PaymentID) AND ([EmployeeID] = @Original_Em" +
                "ployeeID) AND ([FullName] = @Original_FullName) AND ([ESINumber] = @Original_ESI" +
                "Number) AND ([PaymentDate] = @Original_PaymentDate) AND ([PaymentMonth] = @Origi" +
                "nal_PaymentMonth) AND ([HourlyRate] = @Original_HourlyRate) AND ([OvertimeRate] " +
                "= @Original_OvertimeRate) AND ([ContractualHours] = @Original_ContractualHours) " +
                "AND ([OvertimeHours] = @Original_OvertimeHours) AND ([TotalHours] = @Original_To" +
                "talHours) AND ([ContractualEarning] = @Original_ContractualEarning) AND ([Overti" +
                "meEarning] = @Original_OvertimeEarning) AND ([TotalEarning] = @Original_TotalEar" +
                "ning) AND ([GSTNO] = @Original_GSTNO) AND ([TDS] = @Original_TDS) AND ([PT] = @O" +
                "riginal_PT) AND ([ESIC] = @Original_ESIC) AND ([LWF] = @Original_LWF) AND ([TaxR" +
                "ate] = @Original_TaxRate) AND ([PF] = @Original_PF) AND ([ADV] = @Original_ADV) " +
                "AND ([TotalDeduction] = @Original_TotalDeduction) AND ([NetPay] = @Original_NetP" +
                "ay));\r\nSELECT PaymentID, EmployeeID, FullName, ESINumber, PaymentDate, PaymentMo" +
                "nth, HourlyRate, OvertimeRate, ContractualHours, OvertimeHours, TotalHours, Cont" +
                "ractualEarning, OvertimeEarning, TotalEarning, GSTNO, TDS, PT, ESIC, LWF, TaxRat" +
                "e, PF, ADV, TotalDeduction, NetPay FROM Payroll WHERE (PaymentID = @PaymentID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaymentID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FullName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FullName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ESINumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ESINumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaymentDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaymentMonth", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentMonth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HourlyRate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HourlyRate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OvertimeRate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OvertimeRate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractualHours", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ContractualHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OvertimeHours", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "OvertimeHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalHours", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "TotalHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractualEarning", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractualEarning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OvertimeEarning", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OvertimeEarning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalEarning", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalEarning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GSTNO", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GSTNO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TDS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TDS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PT", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ESIC", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ESIC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LWF", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LWF", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TaxRate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TaxRate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PF", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PF", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADV", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADV", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalDeduction", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalDeduction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NetPay", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NetPay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PaymentID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FullName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FullName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ESINumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ESINumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PaymentDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PaymentMonth", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentMonth", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HourlyRate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HourlyRate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OvertimeRate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OvertimeRate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContractualHours", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ContractualHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OvertimeHours", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "OvertimeHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalHours", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "TotalHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContractualEarning", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractualEarning", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OvertimeEarning", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OvertimeEarning", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalEarning", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalEarning", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GSTNO", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GSTNO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TDS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TDS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PT", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ESIC", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ESIC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LWF", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LWF", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TaxRate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TaxRate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PF", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PF", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ADV", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADV", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalDeduction", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalDeduction", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NetPay", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NetPay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PayRoll_Application.Properties.Settings.Default.PayrollSystemDBConnectionStringMS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT PaymentID, EmployeeID, FullName, ESINumber, PaymentDate, PaymentMonth, HourlyRate, OvertimeRate, ContractualHours, OvertimeHours, TotalHours, ContractualEarning, OvertimeEarning, TotalEarning, GSTNO, TDS, PT, ESIC, LWF, TaxRate, PF, ADV, TotalDeduction, NetPay FROM dbo.Payroll";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PayrollSystemDBDataSet1.PayrollDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PayrollSystemDBDataSet1.PayrollDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PayrollSystemDBDataSet1.PayrollDataTable dataTable = new PayrollSystemDBDataSet1.PayrollDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PayrollSystemDBDataSet1.PayrollDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PayrollSystemDBDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Payroll");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_PaymentID, 
                    int Original_EmployeeID, 
                    string Original_FullName, 
                    string Original_ESINumber, 
                    System.DateTime Original_PaymentDate, 
                    string Original_PaymentMonth, 
                    string Original_HourlyRate, 
                    string Original_OvertimeRate, 
                    decimal Original_ContractualHours, 
                    decimal Original_OvertimeHours, 
                    decimal Original_TotalHours, 
                    string Original_ContractualEarning, 
                    string Original_OvertimeEarning, 
                    string Original_TotalEarning, 
                    string Original_GSTNO, 
                    string Original_TDS, 
                    string Original_PT, 
                    string Original_ESIC, 
                    string Original_LWF, 
                    string Original_TaxRate, 
                    string Original_PF, 
                    string Original_ADV, 
                    string Original_TotalDeduction, 
                    string Original_NetPay) {
            if ((Original_PaymentID == null)) {
                throw new global::System.ArgumentNullException("Original_PaymentID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_PaymentID));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_EmployeeID));
            if ((Original_FullName == null)) {
                throw new global::System.ArgumentNullException("Original_FullName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_FullName));
            }
            if ((Original_ESINumber == null)) {
                throw new global::System.ArgumentNullException("Original_ESINumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_ESINumber));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_PaymentDate));
            if ((Original_PaymentMonth == null)) {
                throw new global::System.ArgumentNullException("Original_PaymentMonth");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_PaymentMonth));
            }
            if ((Original_HourlyRate == null)) {
                throw new global::System.ArgumentNullException("Original_HourlyRate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_HourlyRate));
            }
            if ((Original_OvertimeRate == null)) {
                throw new global::System.ArgumentNullException("Original_OvertimeRate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_OvertimeRate));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_ContractualHours));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_OvertimeHours));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_TotalHours));
            if ((Original_ContractualEarning == null)) {
                throw new global::System.ArgumentNullException("Original_ContractualEarning");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_ContractualEarning));
            }
            if ((Original_OvertimeEarning == null)) {
                throw new global::System.ArgumentNullException("Original_OvertimeEarning");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_OvertimeEarning));
            }
            if ((Original_TotalEarning == null)) {
                throw new global::System.ArgumentNullException("Original_TotalEarning");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_TotalEarning));
            }
            if ((Original_GSTNO == null)) {
                throw new global::System.ArgumentNullException("Original_GSTNO");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_GSTNO));
            }
            if ((Original_TDS == null)) {
                throw new global::System.ArgumentNullException("Original_TDS");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_TDS));
            }
            if ((Original_PT == null)) {
                throw new global::System.ArgumentNullException("Original_PT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_PT));
            }
            if ((Original_ESIC == null)) {
                throw new global::System.ArgumentNullException("Original_ESIC");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_ESIC));
            }
            if ((Original_LWF == null)) {
                throw new global::System.ArgumentNullException("Original_LWF");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_LWF));
            }
            if ((Original_TaxRate == null)) {
                throw new global::System.ArgumentNullException("Original_TaxRate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_TaxRate));
            }
            if ((Original_PF == null)) {
                throw new global::System.ArgumentNullException("Original_PF");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_PF));
            }
            if ((Original_ADV == null)) {
                throw new global::System.ArgumentNullException("Original_ADV");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_ADV));
            }
            if ((Original_TotalDeduction == null)) {
                throw new global::System.ArgumentNullException("Original_TotalDeduction");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_TotalDeduction));
            }
            if ((Original_NetPay == null)) {
                throw new global::System.ArgumentNullException("Original_NetPay");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_NetPay));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string PaymentID, 
                    int EmployeeID, 
                    string FullName, 
                    string ESINumber, 
                    System.DateTime PaymentDate, 
                    string PaymentMonth, 
                    string HourlyRate, 
                    string OvertimeRate, 
                    decimal ContractualHours, 
                    decimal OvertimeHours, 
                    decimal TotalHours, 
                    string ContractualEarning, 
                    string OvertimeEarning, 
                    string TotalEarning, 
                    string GSTNO, 
                    string TDS, 
                    string PT, 
                    string ESIC, 
                    string LWF, 
                    string TaxRate, 
                    string PF, 
                    string ADV, 
                    string TotalDeduction, 
                    string NetPay) {
            if ((PaymentID == null)) {
                throw new global::System.ArgumentNullException("PaymentID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PaymentID));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(EmployeeID));
            if ((FullName == null)) {
                throw new global::System.ArgumentNullException("FullName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(FullName));
            }
            if ((ESINumber == null)) {
                throw new global::System.ArgumentNullException("ESINumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ESINumber));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(PaymentDate));
            if ((PaymentMonth == null)) {
                throw new global::System.ArgumentNullException("PaymentMonth");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(PaymentMonth));
            }
            if ((HourlyRate == null)) {
                throw new global::System.ArgumentNullException("HourlyRate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(HourlyRate));
            }
            if ((OvertimeRate == null)) {
                throw new global::System.ArgumentNullException("OvertimeRate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(OvertimeRate));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(ContractualHours));
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(OvertimeHours));
            this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(TotalHours));
            if ((ContractualEarning == null)) {
                throw new global::System.ArgumentNullException("ContractualEarning");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ContractualEarning));
            }
            if ((OvertimeEarning == null)) {
                throw new global::System.ArgumentNullException("OvertimeEarning");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(OvertimeEarning));
            }
            if ((TotalEarning == null)) {
                throw new global::System.ArgumentNullException("TotalEarning");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(TotalEarning));
            }
            if ((GSTNO == null)) {
                throw new global::System.ArgumentNullException("GSTNO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(GSTNO));
            }
            if ((TDS == null)) {
                throw new global::System.ArgumentNullException("TDS");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(TDS));
            }
            if ((PT == null)) {
                throw new global::System.ArgumentNullException("PT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(PT));
            }
            if ((ESIC == null)) {
                throw new global::System.ArgumentNullException("ESIC");
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(ESIC));
            }
            if ((LWF == null)) {
                throw new global::System.ArgumentNullException("LWF");
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(LWF));
            }
            if ((TaxRate == null)) {
                throw new global::System.ArgumentNullException("TaxRate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(TaxRate));
            }
            if ((PF == null)) {
                throw new global::System.ArgumentNullException("PF");
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(PF));
            }
            if ((ADV == null)) {
                throw new global::System.ArgumentNullException("ADV");
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(ADV));
            }
            if ((TotalDeduction == null)) {
                throw new global::System.ArgumentNullException("TotalDeduction");
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(TotalDeduction));
            }
            if ((NetPay == null)) {
                throw new global::System.ArgumentNullException("NetPay");
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(NetPay));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string PaymentID, 
                    int EmployeeID, 
                    string FullName, 
                    string ESINumber, 
                    System.DateTime PaymentDate, 
                    string PaymentMonth, 
                    string HourlyRate, 
                    string OvertimeRate, 
                    decimal ContractualHours, 
                    decimal OvertimeHours, 
                    decimal TotalHours, 
                    string ContractualEarning, 
                    string OvertimeEarning, 
                    string TotalEarning, 
                    string GSTNO, 
                    string TDS, 
                    string PT, 
                    string ESIC, 
                    string LWF, 
                    string TaxRate, 
                    string PF, 
                    string ADV, 
                    string TotalDeduction, 
                    string NetPay, 
                    string Original_PaymentID, 
                    int Original_EmployeeID, 
                    string Original_FullName, 
                    string Original_ESINumber, 
                    System.DateTime Original_PaymentDate, 
                    string Original_PaymentMonth, 
                    string Original_HourlyRate, 
                    string Original_OvertimeRate, 
                    decimal Original_ContractualHours, 
                    decimal Original_OvertimeHours, 
                    decimal Original_TotalHours, 
                    string Original_ContractualEarning, 
                    string Original_OvertimeEarning, 
                    string Original_TotalEarning, 
                    string Original_GSTNO, 
                    string Original_TDS, 
                    string Original_PT, 
                    string Original_ESIC, 
                    string Original_LWF, 
                    string Original_TaxRate, 
                    string Original_PF, 
                    string Original_ADV, 
                    string Original_TotalDeduction, 
                    string Original_NetPay) {
            if ((PaymentID == null)) {
                throw new global::System.ArgumentNullException("PaymentID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PaymentID));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(EmployeeID));
            if ((FullName == null)) {
                throw new global::System.ArgumentNullException("FullName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(FullName));
            }
            if ((ESINumber == null)) {
                throw new global::System.ArgumentNullException("ESINumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ESINumber));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(PaymentDate));
            if ((PaymentMonth == null)) {
                throw new global::System.ArgumentNullException("PaymentMonth");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(PaymentMonth));
            }
            if ((HourlyRate == null)) {
                throw new global::System.ArgumentNullException("HourlyRate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(HourlyRate));
            }
            if ((OvertimeRate == null)) {
                throw new global::System.ArgumentNullException("OvertimeRate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(OvertimeRate));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(ContractualHours));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(OvertimeHours));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(TotalHours));
            if ((ContractualEarning == null)) {
                throw new global::System.ArgumentNullException("ContractualEarning");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(ContractualEarning));
            }
            if ((OvertimeEarning == null)) {
                throw new global::System.ArgumentNullException("OvertimeEarning");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(OvertimeEarning));
            }
            if ((TotalEarning == null)) {
                throw new global::System.ArgumentNullException("TotalEarning");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(TotalEarning));
            }
            if ((GSTNO == null)) {
                throw new global::System.ArgumentNullException("GSTNO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(GSTNO));
            }
            if ((TDS == null)) {
                throw new global::System.ArgumentNullException("TDS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(TDS));
            }
            if ((PT == null)) {
                throw new global::System.ArgumentNullException("PT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(PT));
            }
            if ((ESIC == null)) {
                throw new global::System.ArgumentNullException("ESIC");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(ESIC));
            }
            if ((LWF == null)) {
                throw new global::System.ArgumentNullException("LWF");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(LWF));
            }
            if ((TaxRate == null)) {
                throw new global::System.ArgumentNullException("TaxRate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(TaxRate));
            }
            if ((PF == null)) {
                throw new global::System.ArgumentNullException("PF");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(PF));
            }
            if ((ADV == null)) {
                throw new global::System.ArgumentNullException("ADV");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(ADV));
            }
            if ((TotalDeduction == null)) {
                throw new global::System.ArgumentNullException("TotalDeduction");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(TotalDeduction));
            }
            if ((NetPay == null)) {
                throw new global::System.ArgumentNullException("NetPay");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(NetPay));
            }
            if ((Original_PaymentID == null)) {
                throw new global::System.ArgumentNullException("Original_PaymentID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_PaymentID));
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(Original_EmployeeID));
            if ((Original_FullName == null)) {
                throw new global::System.ArgumentNullException("Original_FullName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_FullName));
            }
            if ((Original_ESINumber == null)) {
                throw new global::System.ArgumentNullException("Original_ESINumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_ESINumber));
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((System.DateTime)(Original_PaymentDate));
            if ((Original_PaymentMonth == null)) {
                throw new global::System.ArgumentNullException("Original_PaymentMonth");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_PaymentMonth));
            }
            if ((Original_HourlyRate == null)) {
                throw new global::System.ArgumentNullException("Original_HourlyRate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_HourlyRate));
            }
            if ((Original_OvertimeRate == null)) {
                throw new global::System.ArgumentNullException("Original_OvertimeRate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_OvertimeRate));
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(Original_ContractualHours));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((decimal)(Original_OvertimeHours));
            this.Adapter.UpdateCommand.Parameters[34].Value = ((decimal)(Original_TotalHours));
            if ((Original_ContractualEarning == null)) {
                throw new global::System.ArgumentNullException("Original_ContractualEarning");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_ContractualEarning));
            }
            if ((Original_OvertimeEarning == null)) {
                throw new global::System.ArgumentNullException("Original_OvertimeEarning");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_OvertimeEarning));
            }
            if ((Original_TotalEarning == null)) {
                throw new global::System.ArgumentNullException("Original_TotalEarning");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_TotalEarning));
            }
            if ((Original_GSTNO == null)) {
                throw new global::System.ArgumentNullException("Original_GSTNO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_GSTNO));
            }
            if ((Original_TDS == null)) {
                throw new global::System.ArgumentNullException("Original_TDS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_TDS));
            }
            if ((Original_PT == null)) {
                throw new global::System.ArgumentNullException("Original_PT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_PT));
            }
            if ((Original_ESIC == null)) {
                throw new global::System.ArgumentNullException("Original_ESIC");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_ESIC));
            }
            if ((Original_LWF == null)) {
                throw new global::System.ArgumentNullException("Original_LWF");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_LWF));
            }
            if ((Original_TaxRate == null)) {
                throw new global::System.ArgumentNullException("Original_TaxRate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(Original_TaxRate));
            }
            if ((Original_PF == null)) {
                throw new global::System.ArgumentNullException("Original_PF");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_PF));
            }
            if ((Original_ADV == null)) {
                throw new global::System.ArgumentNullException("Original_ADV");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_ADV));
            }
            if ((Original_TotalDeduction == null)) {
                throw new global::System.ArgumentNullException("Original_TotalDeduction");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_TotalDeduction));
            }
            if ((Original_NetPay == null)) {
                throw new global::System.ArgumentNullException("Original_NetPay");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(Original_NetPay));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int EmployeeID, 
                    string FullName, 
                    string ESINumber, 
                    System.DateTime PaymentDate, 
                    string PaymentMonth, 
                    string HourlyRate, 
                    string OvertimeRate, 
                    decimal ContractualHours, 
                    decimal OvertimeHours, 
                    decimal TotalHours, 
                    string ContractualEarning, 
                    string OvertimeEarning, 
                    string TotalEarning, 
                    string GSTNO, 
                    string TDS, 
                    string PT, 
                    string ESIC, 
                    string LWF, 
                    string TaxRate, 
                    string PF, 
                    string ADV, 
                    string TotalDeduction, 
                    string NetPay, 
                    string Original_PaymentID, 
                    int Original_EmployeeID, 
                    string Original_FullName, 
                    string Original_ESINumber, 
                    System.DateTime Original_PaymentDate, 
                    string Original_PaymentMonth, 
                    string Original_HourlyRate, 
                    string Original_OvertimeRate, 
                    decimal Original_ContractualHours, 
                    decimal Original_OvertimeHours, 
                    decimal Original_TotalHours, 
                    string Original_ContractualEarning, 
                    string Original_OvertimeEarning, 
                    string Original_TotalEarning, 
                    string Original_GSTNO, 
                    string Original_TDS, 
                    string Original_PT, 
                    string Original_ESIC, 
                    string Original_LWF, 
                    string Original_TaxRate, 
                    string Original_PF, 
                    string Original_ADV, 
                    string Original_TotalDeduction, 
                    string Original_NetPay) {
            return this.Update(Original_PaymentID, EmployeeID, FullName, ESINumber, PaymentDate, PaymentMonth, HourlyRate, OvertimeRate, ContractualHours, OvertimeHours, TotalHours, ContractualEarning, OvertimeEarning, TotalEarning, GSTNO, TDS, PT, ESIC, LWF, TaxRate, PF, ADV, TotalDeduction, NetPay, Original_PaymentID, Original_EmployeeID, Original_FullName, Original_ESINumber, Original_PaymentDate, Original_PaymentMonth, Original_HourlyRate, Original_OvertimeRate, Original_ContractualHours, Original_OvertimeHours, Original_TotalHours, Original_ContractualEarning, Original_OvertimeEarning, Original_TotalEarning, Original_GSTNO, Original_TDS, Original_PT, Original_ESIC, Original_LWF, Original_TaxRate, Original_PF, Original_ADV, Original_TotalDeduction, Original_NetPay);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private PayrollTableAdapter _payrollTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public PayrollTableAdapter PayrollTableAdapter {
            get {
                return this._payrollTableAdapter;
            }
            set {
                this._payrollTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._payrollTableAdapter != null) 
                            && (this._payrollTableAdapter.Connection != null))) {
                    return this._payrollTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._payrollTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private int UpdateUpdatedRows(PayrollSystemDBDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._payrollTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Payroll.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._payrollTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private int UpdateInsertedRows(PayrollSystemDBDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._payrollTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Payroll.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._payrollTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private int UpdateDeletedRows(PayrollSystemDBDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._payrollTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Payroll.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._payrollTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public virtual int UpdateAll(PayrollSystemDBDataSet1 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._payrollTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._payrollTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._payrollTableAdapter != null)) {
                    revertConnections.Add(this._payrollTableAdapter, this._payrollTableAdapter.Connection);
                    this._payrollTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._payrollTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._payrollTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._payrollTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._payrollTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._payrollTableAdapter != null)) {
                    this._payrollTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._payrollTableAdapter]));
                    this._payrollTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591